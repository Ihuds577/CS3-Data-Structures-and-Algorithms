import nltk
from nltk.sentiment.vader import SentimentIntensityAnalyzer
import praw

positiveCommentList = []
negativeCommentList = []
neutralCommentList = []

reddit = praw.Reddit(client_id='n9GmTDulB-QDGQ',
                     client_secret='9zeh2ofqXUooI4gjH8WZzv8vxAc',
                     user_agent='my user agent'
                     )


nltk.download('vader_lexicon')
sid = SentimentIntensityAnalyzer()


def get_text_negative_proba(text):
   return sid.polarity_scores(text)['neg']


def get_text_neutral_proba(text):
   return sid.polarity_scores(text)['neu']


def get_text_positive_proba(text):
   return sid.polarity_scores(text)['pos']


def get_submission_comments(url):
    submission = reddit.submission(url=url)
    submission.comments.replace_more()

    return submission.comments


def main():

    comments = get_submission_comments('https://www.reddit.com/r/learnprogramming/comments/5w50g5/eli5_what_is_recursion/')
    print(len(comments))
    processComments(comments)
    print(positiveCommentList[0])
    print(len(positiveCommentList), len(negativeCommentList), len(neutralCommentList))


def processComments(comments):
    for i in range(len(comments)-1):
        neg = get_text_negative_proba(comments[i].body)
        print(neg, 'neg')
        pos = get_text_positive_proba(comments[i].body)
        print(pos, 'pos')
        if (neg >= 0.15):
            negativeCommentList.append(comments[i].body)
        elif (pos >= 0.15):
            positiveCommentList.append(comments[i].body)
        else:
            neutralCommentList.append(comments[i].body)

        if len(comments[i].replies) != 0:
            processComments(comments[i].replies)







main()